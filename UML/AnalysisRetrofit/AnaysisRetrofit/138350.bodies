class CallAdapterTest
!!!159598.java!!!	parameterizedTypeInvalidIndex() : void
    ParameterizedType listOfString = (ParameterizedType) new TypeToken<List<String>>() {}.getType();
    try {
      getParameterUpperBound(-1, listOfString);
      fail();
    } catch (IllegalArgumentException e) {
      assertThat(e).hasMessage("Index -1 not in range [0,1) for java.util.List<java.lang.String>");
    }
    try {
      getParameterUpperBound(1, listOfString);
      fail();
    } catch (IllegalArgumentException e) {
      assertThat(e).hasMessage("Index 1 not in range [0,1) for java.util.List<java.lang.String>");
    }
!!!159726.java!!!	parameterizedTypes() : void
    ParameterizedType one = (ParameterizedType) new TypeToken<List<String>>() {}.getType();
    assertThat(getParameterUpperBound(0, one)).isSameAs(String.class);

    ParameterizedType two = (ParameterizedType) new TypeToken<Map<String, String>>() {}.getType();
    assertThat(getParameterUpperBound(0, two)).isSameAs(String.class);
    assertThat(getParameterUpperBound(1, two)).isSameAs(String.class);

    ParameterizedType wild = (ParameterizedType) new TypeToken<List<? extends CharSequence>>() {
    }.getType();
    assertThat(getParameterUpperBound(0, wild)).isSameAs(CharSequence.class);
!!!159854.java!!!	rawTypeThrowsOnNull() : void
    try {
      getRawType(null);
      fail();
    } catch (NullPointerException e) {
      assertThat(e).hasMessage("type == null");
    }
!!!159982.java!!!	rawTypes() : void
    assertThat(getRawType(String.class)).isSameAs(String.class);

    Type listOfString = new TypeToken<List<String>>() {}.getType();
    assertThat(getRawType(listOfString)).isSameAs(List.class);

    Type stringArray = new TypeToken<String[]>() {}.getType();
    assertThat(getRawType(stringArray)).isSameAs(String[].class);

    Type wild = ((ParameterizedType) new TypeToken<List<? extends CharSequence>>() {
    }.getType()).getActualTypeArguments()[0];
    assertThat(getRawType(wild)).isSameAs(CharSequence.class);

    Type wildParam = ((ParameterizedType) new TypeToken<List<? extends List<String>>>() {
    }.getType()).getActualTypeArguments()[0];
    assertThat(getRawType(wildParam)).isSameAs(List.class);

    Type typeVar = A.class.getDeclaredMethod("method").getGenericReturnType();
    assertThat(getRawType(typeVar)).isSameAs(Object.class);
