class RecordingSubscriber
!!!247406.java!!!	RecordingSubscriber(in initialRequest : long)
    this.initialRequest = initialRequest;
!!!247534.java!!!	onSubscribe(inout subscription : Subscription) : void
    this.subscription = subscription;

    subscription.request(initialRequest);
!!!247662.java!!!	onNext(inout value : T) : void
    events.add(Notification.createOnNext(value));
!!!247790.java!!!	onComplete() : void
    events.add(Notification.<T>createOnComplete());
!!!247918.java!!!	onError(inout e : Throwable) : void
    events.add(Notification.<T>createOnError(e));
!!!248046.java!!!	takeNotification() : Notification<T>
    Notification<T> notification = events.pollFirst();
    if (notification == null) {
      throw new AssertionError("No event found!");
    }
    return notification;
!!!248174.java!!!	takeValue() : T
    Notification<T> notification = takeNotification();
    assertThat(notification.isOnNext())
        .as("Expected onNext event but was " + notification)
        .isTrue();
    return notification.getValue();
!!!248302.java!!!	takeError() : Throwable
    Notification<T> notification = takeNotification();
    assertThat(notification.isOnError())
        .as("Expected onError event but was " + notification)
        .isTrue();
    return notification.getError();
!!!248430.java!!!	assertAnyValue() : RecordingSubscriber
    takeValue();
    return this;
!!!248558.java!!!	assertValue(inout value : T) : RecordingSubscriber
    assertThat(takeValue()).isEqualTo(value);
    return this;
!!!248686.java!!!	assertComplete() : void
    Notification<T> notification = takeNotification();
    assertThat(notification.isOnComplete())
        .as("Expected onCompleted event but was " + notification)
        .isTrue();
    assertNoEvents();
!!!248814.java!!!	assertError(inout throwable : Throwable) : void
    assertThat(takeError()).isEqualTo(throwable);
!!!248942.java!!!	assertError(inout errorClass : Class<? extends Throwable>) : void
    assertError(errorClass, null);
!!!249070.java!!!	assertError(inout errorClass : Class<? extends Throwable>, in message : String) : void
    Throwable throwable = takeError();
    assertThat(throwable).isInstanceOf(errorClass);
    if (message != null) {
      assertThat(throwable).hasMessage(message);
    }
    assertNoEvents();
!!!249198.java!!!	assertNoEvents() : void
    assertThat(events).as("Unconsumed events found!").isEmpty();
!!!249326.java!!!	request(in amount : long) : void
    if (subscription == null) {
      throw new IllegalStateException("onSubscribe has not been called yet. Did you subscribe()?");
    }
    subscription.request(amount);
